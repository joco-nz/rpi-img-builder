#!/usr/bin/env bash
source /root/source.txt
source /root/board.txt
source /root/userdata.txt
if [ $verbose -eq 1 ]; then
	set -x;
fi
if [ -f /root/services.txt ]; then
	source /root/services.txt;
fi
source /root/universal.txt
source /root/${DISTRO}.txt
source /root/networking.txt
UNMINIMIZE=/usr/local/sbin/unminimize
URL="https://raw.githubusercontent.com/pyavitz/scripts/master/"

set -o errexit
set -o pipefail
set -o nounset

if [ $networkmanager -eq 0 ]; then
	if [[ "$DISTRO_VERSION" == "jammy" ]] || [[ "$DISTRO_VERSION" == "kinetic" ]]; then
		# systemd-resolved breaks static ip when using ifupdown
		# it will be disabled on jammy jellyfish
		unlink /etc/resolv.conf;
		if [ -f /etc/resolv.conf ]; then
			rm -f /etc/resolv.conf;
		fi
		systemctl disable systemd-resolved;
	fi
fi
echo "nameserver ${NAMESERVER1}" > /etc/resolv.conf
echo "nameserver ${NAMESERVER2}" >> /etc/resolv.conf

mount -t proc proc proc/
mount -t sysfs sys sys/

export DEBIAN_FRONTEND="noninteractive"

apt-get update
apt-get install -y apt-utils

# Locales
set_locales

# Timezone
set_timezone

apt upgrade -y
apt dist-upgrade -y
apt autoremove -y
if [[ "$DISTRO" == "ubuntu" ]]; then
	if [ -f "$UNMINIMIZE" ]; then
		echo 'y' | unminimize;
	fi
	apt_preferences;
	echo "";
fi
# Set network variables
if [ $networkmanager -eq 1 ]; then
	NETWORKING="network-manager";
	if [[ "$DISTRO" == "devuan" ]]; then
		NETWORKING_EXTRA="";
	fi
else
	NETWORKING="ifupdown";
	if [[ "$DISTRO" == "devuan" ]]; then
		NETWORKING_EXTRA="ifupdown-extra";
	fi
fi
if [ $ext4 -eq 1 ]; then
	FSPROG="e2fsprogs";
fi
if [ $btrfs -eq 1 ]; then
	FSPROG="btrfs-progs";
fi
if [ $xfs -eq 1 ]; then
	FSPROG="xfsprogs";
fi
if [[ "$DISTRO" == "debian" ]]; then
	apt install -y ${PKGS} ${USER_PKGS} ${SYSMODS} ${FIRMWARE} resolvconf openssh-client openssh-server ${FSPROG} ${NETWORKING};
fi
if [[ "$DISTRO" == "devuan" ]]; then
	apt install -y openssh-client openssh-server --no-install-recommends;
	apt install -y ${PKGS} ${USER_PKGS} ${SYSMODS} ${FIRMWARE} openresolv ${FSPROG} ${NETWORKING} ${NETWORKING_EXTRA};
fi
if [[ "$DISTRO" == "ubuntu" ]]; then
	apt install -y ${PKGS} ${USER_PKGS} ${SYSMODS} openresolv openssh-client openssh-server ${FSPROG} ${NETWORKING};
fi
# apt clean
apt -y clean
apt -y autoclean

# User options
echo -n "raspberrypi" > /etc/hostname;
sed -i "1 a 127.0.1.1	raspberrypi" /etc/hosts;
if [ $useracct -eq 0 ]; then
	echo "";
	adduser ${USERNAME} --gecos ${NAME} --disabled-password
	echo "${USERNAME}:${PASSWORD}" | chpasswd
	adduser ${USERNAME} sudo
	adduser ${USERNAME} audio
	adduser ${USERNAME} dialout
	adduser ${USERNAME} video
	adduser ${USERNAME} disk
	adduser ${USERNAME} plugdev
	adduser ${USERNAME} netdev
	adduser ${USERNAME} bluetooth
	adduser ${USERNAME} input
	adduser ${USERNAME} render
	adduser ${USERNAME} tty
	adduser ${USERNAME} i2c
	groupadd gpio
	groupadd spi
	adduser ${USERNAME} gpio
	adduser ${USERNAME} spi
fi
if [ $useracct -eq 1 ]; then
	mkdir -p /boot;
	mkdir -p /usr/local/sbin;
	mv -f /root/useracct/useraccount /usr/local/sbin/;
	chmod +x /usr/local/sbin/useraccount;
	mv -f /root/{nanorc-user,user-ini} /etc/opt/;
	mv -f /root/useracct/useraccount.txt /boot/rename_to_useraccount.txt;
	if [[ "$DISTRO" == "devuan" ]]; then
		mkdir -p /etc/init.d;
		mv -f /root/useracct/useraccount.init /etc/init.d/useraccount;
		chmod +x /etc/init.d/useraccount;
		update-rc.d useraccount defaults 5;
		rm -fdr /root/useracct;
	else
		mkdir -p /etc/systemd/system/;
		mv -f /root/useracct/useraccount.service /etc/systemd/system/;
		systemctl enable useraccount > /dev/null 2>&1;
		rm -fdr /root/useracct;
	fi
fi
if [ $rootpasswd -eq 1 ]; then
	root_password;
fi

# Sudoers file
if [ $useracct -eq 0 ]; then
	echo "";
	tee /etc/sudoers.d/010_${USERNAME}-nopasswd <<EOF
${USERNAME} ALL=(ALL) NOPASSWD: ALL
EOF
fi

# User script (function 2)
if [ $uscripts -eq 1 ]; then
	echo ""
	uscripts_stage2;
fi

# Skins
cd ~
mkdir -p /usr/share/mc/skins
mv -f darkgreen.ini /usr/share/mc/skins/darkgreen.ini
mv -f darkred.ini /usr/share/mc/skins/darkred.ini
mkdir -p /root/.config/mc
mv -f root-ini /root/.config/mc/ini
mv -f nanorc-root /root/.nanorc
chown -R root:root /root
if [ $useracct -eq 0 ]; then
	mkdir -p /home/${USERNAME}/.config/mc;
	mv -f user-ini /home/${USERNAME}/.config/mc/ini;
	mv -f nanorc-user /home/${USERNAME}/.nanorc;
	chown -R ${USERNAME}:${USERNAME} /home/${USERNAME};
fi

# Scripts
echo ""
echo "Moving scripts ..."
cd ~
mkdir -p /usr/local/bin
mkdir -p /usr/local/sbin
if [[ "$BOARD_EXT" == "rpi-4" ]]; then
	wget -cq --show-progress ${URL}write2usb;
	wget -cq --show-progress ${URL}deb-eeprom;
	mv -f {write2usb,deb-eeprom} /usr/local/bin/;
fi
wget -cq --show-progress ${URL}swh
#wget -cq --show-progress ${URL}fetch
wget -cq --show-progress ${URL}governor
mv -f {swh,governor,setup,sysinfo,smon,menu-config,menu-config-update} /usr/local/bin/
initrd_script
mv -f firstboot.sh /usr/local/sbin/firstboot
mv -f leds.sh /usr/local/sbin/leds
if [[ "$DISTRO" == "devuan" ]]; then
	# Inits
	mv -f firstboot.init /etc/init.d/firstboot;
	mv -f leds.init /etc/init.d/leds;
	mv -f governor.init /etc/init.d/governor;
	mv -f bthelper.init /etc/init.d/bthelper;
	mv -f zramswap.init /etc/init.d/zramswap;
	if [ $networkmanager -eq 1 ]; then
		rm -f network.init;
	else
		mv -f network.init /etc/init.d/network;
	fi
	mv -f credentials.init /etc/init.d/credentials;
fi
mv -f growpart /usr/bin/
chmod +x /usr/bin/growpart
chown root:root /usr/bin/growpart
chmod +x /usr/local/bin/*
chmod +x /usr/local/sbin/*
chown -R root:root /usr/local/bin/
chown -R root:root /usr/local/sbin/
echo "Done."

# MOTD
mkdir -p /etc/update-motd.d
if [[ -f "/etc/update-motd.d/10-uname" ]]; then
	rm -f /etc/update-motd.d/10-uname;
fi
if [[ -f "/etc/update-motd.d/10-help-text" ]]; then
	rm -f /etc/update-motd.d/10-help-text;
fi
if [[ -f "/etc/update-motd.d/00-header" ]]; then
	rm -f /etc/update-motd.d/00-header;
fi
mv -f {00-header,15-brand,20-sysinfo,90-dynamic-motd} /etc/update-motd.d/
chmod +x /etc/update-motd.d/*
echo "# DYNAMIC MOTD VARIABLES" > /etc/default/dynamic-motd
echo "H_POS=-c" >> /etc/default/dynamic-motd
echo "B_POS=-r" >> /etc/default/dynamic-motd
echo "BRANDING=false" >> /etc/default/dynamic-motd
echo "T_FONT=small" >> /etc/default/dynamic-motd
echo "T_FILTER=metal" >> /etc/default/dynamic-motd
echo "MENUCONFIG=true" >> /etc/default/dynamic-motd
chown root:root /etc/update-motd.d/00-header
chown root:root /etc/update-motd.d/15-brand
chown root:root /etc/update-motd.d/20-sysinfo
chown root:root /etc/update-motd.d/90-dynamic-motd
rm -f /etc/motd
echo "" > /etc/motd
chown root:root /etc/motd

# Extra firmware
extra_firmware
if [[ -f "/root/u-boot.bin" ]]; then
	mv /root/u-boot.bin /boot/broadcom/u-boot.bin;
fi

# Udev rule
if [[ -f "/root/99-com.rules" ]]; then
	cd ~
	mkdir -p /lib/udev/rules.d/;
	mv -f 99-com.rules /lib/udev/rules.d/;
fi

# Wireless regdb
wireless_regdb

# Network Setup
if [ $networkmanager -eq 1 ]; then
	networkmanager-setup > /dev/null 2>&1;
	networkmanager-credentials > /dev/null 2>&1;
else
	ifupdown-setup > /dev/null 2>&1;
	ifupdown-credentials > /dev/null 2>&1;
fi

# Board information
if [[ -f "/root/board.txt" ]]; then
	cp -f /root/board.txt /etc/opt/;
	ln -sr /etc/opt/board.txt /etc/opt/soc.txt;
	chown root:root /etc/opt/board.txt;
fi

# ZSWAP virtual memory
if [[ -f "/etc/default/zramswap" ]]; then
	sed -i 's/#ALLOCATION=256/ALLOCATION=1024/g' /etc/default/zramswap;
	sed -i 's/#SIZE=256/SIZE=1024/g' /etc/default/zramswap;
	sed -i 's/#PRIORITY=100/PRIORITY=100/g' /etc/default/zramswap;
fi

# Adding sys-mods
raspberrypi_sys_mods
if [[ -f "/etc/sudoers.d/010_pi-nopasswd" ]]; then
	# security risk
	rm -f /etc/sudoers.d/010_pi-nopasswd;
fi

# Pi Bluetooth
echo ""
echo "Installing pi-bluetooth ..."
if [[ "$DISTRO" == "ubuntu" ]]; then
	git clone https://github.com/pyavitz/pi-bluetooth.git -b ubuntu;
else
	git clone https://github.com/pyavitz/pi-bluetooth.git;
fi
cd pi-bluetooth
chmod +x debian/rules
dpkg-buildpackage -us -uc
cd ~
dpkg -i pi-bluetooth_*.deb
rm -fdR pi-bluetooth*
echo "Done."

#  Raspi userland
rpi_userland

# Adding eeprom
if [[ "$BOARD_EXT" == "rpi-4" ]]; then
	bcm2711_eeprom;
fi

# Remove zstd compression (not supported by older kernels)
if [[ "$DISTRO" == "ubuntu" ]]; then
	if [[ "$DISTRO_VERSION" == "jammy" ]] || [[ "$DISTRO_VERSION" == "kinetic" ]]; then
		if [[ `grep -w "COMPRESS=zstd" "/etc/initramfs-tools/initramfs.conf"` ]]; then
			sed -i 's/COMPRESS=zstd/COMPRESS=xz/g' /etc/initramfs-tools/initramfs.conf;
		fi
	fi
fi

# Kernel
stage2_kernel # universal

# BCM modules
bcm_modules > /dev/null 2>&1;
if [[ "$BOARD" == "bcm2710" ]]; then
	# audio module
	echo "snd_bcm2835" >> /etc/modules;
fi
if [[ "$BOARD" == "bcm2709" ]]; then
	# audio module
	echo "snd_bcm2835" >> /etc/modules;
fi

# Clean misc files
rm -f {*.patch,*led*,*eeprom*}

# Whiptail color palette
if [[ "$DISTRO" == "ubuntu" ]]; then
	mkdir -p /etc/newt;
	palette-dark > /dev/null 2>&1;
	ln -sf /etc/newt/palette.dark  /etc/alternatives/newt-palette;
fi

# RPi Hack
if [[ "$BOARD" == "bcm2708" ]]; then
	ln -s /lib/ld-linux.so.3 /lib/ld-linux-armhf.so.3;
fi

# Flush runtime journal
if [[ "$BOARD" == "bcm2708" ]]; then
	:;
else
	if [[ -f "/etc/systemd/journald.conf" ]]; then
		sed -i 's/#Storage=auto/Storage=volatile/g' /etc/systemd/journald.conf;
		sed -i 's/#SystemMaxFileSize=/SystemMaxFileSize=50M/g' /etc/systemd/journald.conf;
		sed -i 's/#SystemMaxFiles=100/SystemMaxFiles=5/g' /etc/systemd/journald.conf;
	fi
fi

# Vchiq permissions
echo 'SUBSYSTEM=="vchiq",GROUP="video",MODE="0660"' > /etc/udev/rules.d/10-vchiq-permissions.rules
echo 'SUBSYSTEM=="vcio",GROUP="video",MODE="0660"' >> /etc/udev/rules.d/10-vchiq-permissions.rules
echo 'SUBSYSTEM=="vc-mem",GROUP="video",MODE="0660"' >> /etc/udev/rules.d/10-vchiq-permissions.rules

if [[ "$DISTRO" == "devuan" ]]; then
	if [ $btrfs -eq 1 ]; then
		btrfs_udev-rule;
	fi
fi

echo ""
echo "Checking Services ..."
sleep 1s
if [[ "$DISTRO" == "devuan" ]]; then
	echo "== Sysvinit";
	enable_services > /dev/null 2>&1;
else
	echo "== Systemd";
	firstboot_service > /dev/null 2>&1;
	credentials_service > /dev/null 2>&1;
	governor_service > /dev/null 2>&1;
	led_service > /dev/null 2>&1;
	rc-local_service > /dev/null 2>&1;
	enable_services > /dev/null 2>&1;
fi
echo "Done."

# Finish
echo ""
echo "Finalizing ..."
echo ""
sleep 1s

umount /proc /sys
