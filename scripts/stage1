#!/bin/bash
source lib/function/echoes
source lib/source
validation
source userdata.txt
source lib/function/universal
if [ $uscripts -eq 1 ]; then
	uscripts_pre-stage1;
fi
source board.txt
source lib/function/staging
source lib/function/${DISTRO}

# verbose
if [ $verbose -eq 1 ]; then
	set -eux -o pipefail;
else
	set -eu -o pipefail;
fi

CAP_DISTRO=`echo "${DISTRO}" | sed -e "s/\b\(.\)/\u\1/g"`
CAP_RELEASE=`echo "${DISTRO_VERSION}" | sed -e "s/\b\(.\)/\u\1/g"`
echo ""
echo -e "${WHT}Distribution${FIN} ${PNK}[${FIN}${GRN}${CAP_DISTRO} ${CAP_RELEASE}${FIN}${PNK}]${FIN}"
RAM=0
PROXY=""
IMAGE_FOLDER="img/"
IMAGE_DATE="$(date +%F)"
IMAGE_FILE_NAME="${BOARD_EXT}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img"
if [ $RAM -ne 0 ]; then
	IMAGE_FOLDER="ram/";
fi
mkdir -p "$IMAGE_FOLDER"
if [ $RAM -ne 0 ]; then
	mount -t tmpfs -o size=3G tmpfs $IMAGE_FOLDER;
fi

if [ $verbose -eq 1 ]; then
	partitions;
	partition_uuid;
else
	partitions > /dev/null 2>&1;
	partition_uuid > /dev/null 2>&1;
fi

# cmd line
cmdline > /dev/null 2>&1
if [[ -f "p1/cmdline.txt" ]]; then
	:;
else
	echo -en "${WHT}cmdline.txt${FIN}  ";
	sleep 1s;
	echo_fail;
	exit;
fi
# config dot txt
if [[ "$BOARD_EXT" == "rpi-4" ]]; then
	bcm2711_config > /dev/null 2>&1;
else
	${BOARD}_config > /dev/null 2>&1;
fi
if [[ -f "p1/config.txt" ]]; then
	:;
else
	echo "";
	echo -en "${WHT}config.txt${FIN}   ";
	sleep 1s;
	echo_fail;
	exit;
fi
if [[ "$BOARD" == "bcm2711v7" ]]; then
	sed -i '1d' p1/config.txt;
	#sed -i 's/kernel=kernel8.img/kernel=kernel7l.img/g' p1/config.txt;
fi

# extract rootfs
if [[ -f "${DISTRO}-${DISTRO_VERSION}-${ROOTFS_ARCH}.tar.xz" ]]; then
	echo -en "${WHT}Extracting rootfs${FIN} ";
	tar -xf ${DISTRO}-${DISTRO_VERSION}-${ROOTFS_ARCH}.tar.xz -C ${P_VALUE}/;
	echo_bdone;
else
	echo -e "${YLW}Missing rootfs tarball${FIN}!";
	make cleanup;
	exit;
fi
echo ""

mkdir -p p2/etc/apt/apt.conf.d p2/etc/dpkg/dpkg.cfg.d
echo "force-unsafe-io" > "p2/etc/dpkg/dpkg.cfg.d/dpkg-unsafe-io"

# qemu static
mkdir -p p2/usr/bin;
cp $(command -v "${STATIC}") p2/usr/bin;
if [[ ! -z $P_VALUE ]]; then
	RELEASE="${P_VALUE}/etc/apt/sources.list"
fi
if [ $verbose -eq 1 ]; then
	distro_release;
	create_fstab;
else
	distro_release > /dev/null 2>&1;
	create_fstab > /dev/null 2>&1;
fi

if [ -n "$PROXY" ] ; then
	tee "p2/etc/apt/apt.conf.d/30proxy" <<EOF
Acquire::http::proxy "http://127.0.0.1:3142";
EOF
fi

# setup stage2
cp scripts/stage2 p2/root
cp lib/function/${DISTRO} p2/root/${DISTRO}.txt
cp lib/function/universal p2/root/universal.txt
cp lib/function/networking p2/root/networking.txt
cp lib/source p2/root/source.txt
cp userdata.txt p2/root
cp board.txt p2/root
if [[ "$DISTRO" == "devuan" ]]; then
	cp files/inits/* p2/root;
else
	cp lib/function/services p2/root/services.txt;
fi
cp files/patches/* p2/root
cp files/misc/* p2/root
cp files/scripts/* p2/root
cp files/users/* p2/root
cp files/firmware/* p2/root
if [[ "$EFI" == "true" ]]; then
	cp files/uboot/${BOARD} p2/root/u-boot.bin;
fi
if [ $useracct -eq 1 ]; then
	mkdir -p p2/root/useracct;
	cp -r files/useracct/* p2/root/useracct;
fi
if [ $uscripts -eq 1 ]; then
	uscripts_stage1;
fi
stage1_kernel # universal
echo -e "${WHT}Starting chroot${FIN} ..."
# Mount and chroot
if [[ "$EFI" == "true" ]]; then
	mkdir -p p2/boot/efi;
	mount -o bind p1 p2/boot/efi;
else
	mount -o bind p1 p2/boot;
fi
mount -o bind /dev p2/dev
mount -o bind /dev/pts p2/dev/pts
chroot p2 /root/stage2;
# unmount
umount p2/dev/pts
umount p2/dev
if [[ "$EFI" == "true" ]]; then
	umount p2/boot/efi;
else
	umount p2/boot;
fi
# qemu remove static
if [ -e p2/usr/bin/${STATIC} ]; then
	rm -f p2/usr/bin/${STATIC};
fi
cp -f p2/root/kernel.txt .
rm p2/root/stage2
rm -f p2/root/*.txt
rm -f p2/var/cache/debconf/*

if [ -n "$PROXY" ]; then
	rm p2/etc/apt/apt.conf.d/30proxy
fi
rm p2/etc/dpkg/dpkg.cfg.d/dpkg-unsafe-io

# Finish
defrag_p2

umount p2
umount p1

losetup -d "${IMAGE_LOOP_DEV}"
mv "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" "${IMAGE_FILE_NAME}"
if [ $RAM -ne 0 ]; then
	umount "${IMAGE_FOLDER}"
fi
rmdir "${IMAGE_FOLDER}"
rmdir p1 p2

if [ $ext4 -eq 1 ]; then
	ext4_shrink;
else
	:;
fi
finish_image
rm -f {part-uuid.txt,board.txt,kernel.txt}

exit 0
