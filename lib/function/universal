#!/bin/bash

# Stage1
stage1_kernel(){
if [[ `ls ${OUTPUT}/{linux-image-*.deb,linux-headers-*.deb}` ]] > /dev/null 2>&1; then
	cp ${OUTPUT}/*.deb p2/root;
else
	echo "";
	echo -en "${BOARD}";
	echo -e ": Compile a kernel before building an image."
	make cleanup;
	exit 0;
fi
}

# Stage 2
root_password(){
echo "root:toor" | chpasswd
}

# SYS-MODS
raspberrypi_sys_mods(){
echo ""
echo "Installing raspi-sys-mods ..."
git clone https://github.com/RPi-Distro/raspberrypi-sys-mods.git
if [[ "$DISTRO" == "devuan" ]]; then
	mv -f raspberrypi-sys-mods-control.patch raspberrypi-sys-mods/;
	cd raspberrypi-sys-mods;
	git checkout -q 46ae4208397d662fc4f5d0cc9acc85395f852af1
	patch -p1 < raspberrypi-sys-mods-control.patch;
	rm -f raspberrypi-sys-mods-control.patch;
else
	rm -f raspberrypi-sys-mods-control.patch;
	cd raspberrypi-sys-mods;
	git checkout -q 46ae4208397d662fc4f5d0cc9acc85395f852af1
fi
dpkg-buildpackage -us -uc
cd ~
dpkg -i raspberrypi-sys-mods*.deb
rm -fdr raspberrypi-sys-mods*
if [ -f /etc/apt/sources.list.d/vscode.list ]; then
	rm -f /etc/apt/sources.list.d/vscode.list;
fi
if [ -f /etc/apt/trusted.gpg.d/microsoft.gpg ]; then
	rm -f /etc/apt/trusted.gpg.d/microsoft.gpg;
fi
if [ -f /etc/apt/preferences.d/3rd_parties.pref ]; then
	rm -f /etc/apt/preferences.d/3rd_parties.pref;
fi
echo "Done."
}

# EEPROM
find_eeprom(){
EEPROM_VERSION=$(curl --silent -L ${CHANGELOG} | awk '{if (NR==1) {print substr($2, 1, length($2)-3)}}' | sed 's/[()]//g')
if [[ `wget -S --spider ${ERURL}rpi-eeprom_${EEPROM_VERSION}.orig.tar.gz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	download_eeprom;
else
	finding_eeprom;
fi
}

finding_eeprom(){
EEPROM_VERSION=$(curl --silent -L ${CHANGELOG} | awk '{if (NR==10) {print substr($2, 1, length($2)-3)}}' | sed 's/[()]//g')
if [[ `wget -S --spider ${ERURL}rpi-eeprom_${EEPROM_VERSION}.orig.tar.gz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	download_eeprom;
else
	EEPROM_VERSION="13.12"
	download_eeprom;
fi
}

download_eeprom(){
wget -cq --show-progress ${ERURL}rpi-eeprom_${EEPROM_VERSION}-1.debian.tar.xz
wget -cq --show-progress ${ERURL}rpi-eeprom_${EEPROM_VERSION}.orig.tar.gz
}

bcm2711_eeprom(){
ERURL="https://archive.raspberrypi.org/debian/pool/main/r/rpi-eeprom/"
CHANGELOG="https://raw.githubusercontent.com/raspberrypi/rpi-eeprom/debian/bullseye/debian/changelog"
echo ""
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
echo "Installing rpi-eeprom ..."
apt install help2man rsync pciutils -y
mkdir -p ~/eeprom
mv -f rpi-eeprom-update.patch /root/eeprom/
mv -f rpi-eeprom-control.patch /root/eeprom/
cd ~/eeprom
find_eeprom
tar xf rpi-eeprom_${EEPROM_VERSION}.orig.tar.gz
tar xf rpi-eeprom_${EEPROM_VERSION}-1.debian.tar.xz
rm -f rpi-eeprom_${EEPROM_VERSION}-1.debian.tar.xz
mkdir -p debian/patches
mv rpi-eeprom-update.patch debian/patches/rpi-eeprom-update.patch 
echo rpi-eeprom-update.patch >> debian/patches/series
mv -f debian rpi-eeprom-${EEPROM_VERSION}/
mv rpi-eeprom-control.patch rpi-eeprom-${EEPROM_VERSION}/
cd rpi-eeprom-${EEPROM_VERSION}
patch -p1 < rpi-eeprom-control.patch
rm -f rpi-eeprom-control.patch
dpkg-buildpackage -us -nc -uc
cd ..
dpkg -i *.deb
cd ..
rm -fdr eeprom
echo "Done."
}

# Userland
rpi_userland(){
echo ""
echo "Installing userland ..."
rm -f /etc/profile
mv -f profile /etc/profile
mv rpi-vc.conf /etc/ld.so.conf.d/rpi-vc.conf
chown root:root /etc/profile
chown root:root /etc/ld.so.conf.d/rpi-vc.conf
mkdir -p /opt
git clone https://github.com/raspberrypi/userland.git
mv -f userland-remove-hi-pi.patch /root/userland/
cd userland
patch -p1 < userland-remove-hi-pi.patch
rm -f userland-remove-hi-pi.patch
if [[ "$ARCH" == "arm64" ]]; then
	echo -e "\e[1;37m== ARM64\e[0m";
	sleep 1s;
	./buildme --aarch64;
else
	echo -e "\e[1;37m== ARM\e[0m";
	sleep 1s;
	./buildme;
fi
cd ~
rm -fdr userland
ldconfig
echo "Done."
}

# Modules
bcm_modules(){
rm -f /etc/modules
tee /etc/modules <<EOF
# /etc/modules: kernel modules to load at boot time.
#
# This file contains the names of kernel modules that should be loaded
# at boot time, one per line. Lines beginning with "#" are ignored.
#bcm2835-v4l2
#i2c-dev

EOF
chown root:root /etc/modules
}

# Kernel
stage2_kernel(){
echo ""
echo "Installing kernel ..."
apt update
apt upgrade -y
if [[ "$EFI" == "true" ]]; then
	apt install -y grub-efi;
fi
if [ $ext4 -eq 1 ]; then
	echo "" >> /etc/opt/board.txt;
	echo "# filesystem" >> /etc/opt/board.txt;
	echo FSTYPE='"'ext4'"' >> /etc/opt/board.txt;
fi
if [ $btrfs -eq 1 ]; then
	echo "" >> /etc/opt/board.txt;
	echo "# filesystem" >> /etc/opt/board.txt;
	echo FSTYPE='"'btrfs'"' >> /etc/opt/board.txt;
fi
if [ $xfs -eq 1 ]; then
	echo "" >> /etc/opt/board.txt;
	echo "# filesystem" >> /etc/opt/board.txt;
	echo FSTYPE='"'xfs'"' >> /etc/opt/board.txt;
fi
apt -y clean
apt -y autoclean
sleep 1s
cd ~
dpkg -i *.deb;
rm -f *.deb;
echo "Done."
sleep 1s
# take note of linux kernel release
if [ -f /usr/src/linux-headers-*/include/config/kernel.release ]; then
	KERNEL_RELEASE=`cat /usr/src/linux-headers-*/include/config/kernel.release`
else
	KERNEL_RELEASE=`ls /boot/config-* | sed 's/\/boot\/config-//g'`
fi
echo -e INSTALLED_KERNEL='"'$KERNEL_RELEASE'"' > /root/kernel.txt
if [ $ext4 -eq 1 ]; then
	echo FSTYPE='"'ext4'"' >> /root/kernel.txt;
fi
if [ $btrfs -eq 1 ]; then
	echo FSTYPE='"'btrfs'"' >> /root/kernel.txt;
fi
if [ $xfs -eq 1 ]; then
	echo FSTYPE='"'xfs'"' >> /root/kernel.txt;
fi
if [[ "$EFI" == "true" ]]; then
	# 99-uefi uses /etc/opt/board.txt, this script does not.
	# re-source /root/board.txt to ensure no confusion.
	source /root/board.txt
fi
}

# whiptail color palette (ubuntu)
palette-dark(){
tee /etc/newt/palette.dark <<EOF
root=,black
checkbox=,black
entry=,black
label=black,
actlistbox=,black
helpline=,black
roottext=lightgray,black
emptyscale=black
disabledentry=black,
EOF
}

# User scripts
uscripts_pre-stage1(){
if [ -f files/userscripts/uscripts ]; then
	if [[ `grep -w "run_function0" "files/userscripts/uscripts"` ]]; then
		source files/userscripts/uscripts;
		run_function0;
	fi
fi
}

uscripts_stage1(){
if [ -f files/userscripts/uscripts ]; then
	mkdir -p p2/root/userscripts;
	cp -fr files/userscripts/* p2/root/userscripts/;
	if [ -f p2/root/userscripts/README.md ]; then
		rm -f p2/root/userscripts/README.md;
	fi
	if [[ `grep -w "run_function1" "files/userscripts/uscripts"` ]]; then
		if [[ `grep -w "run_function0" "files/userscripts/uscripts"` ]]; then
			# file already sourced
			:;
		else
			source files/userscripts/uscripts;
		fi
		run_function1;
	fi
fi
}

uscripts_stage2(){
if [ -f /root/userscripts/uscripts ]; then
	if [[ `grep -w "run_function2" "/root/userscripts/uscripts"` ]]; then
		echo -e "\e[1;33mRunning user scripts\e[0m.";
		source /root/userscripts/uscripts;
		run_function2;
		echo -e "\e[1;33mDone\e[0m.";
	fi
fi
if [ -e /root/userscripts ]; then
	rm -fdr /root/userscripts;
fi
}

# Initrd script
initrd_script(){
cd ~
if [ -f /root/99-initrd ]; then
	mkdir -p /etc/initramfs/post-update.d/
	mv -f 99-initrd /etc/initramfs/post-update.d/
	chmod +x /etc/initramfs/post-update.d/99-initrd
	chown root:root /etc/initramfs/post-update.d/99-initrd
fi
if [[ "$EFI" == "true" ]]; then
	# uefi kernel, initrd, dtb and grub cfg script
	mkdir -p /etc/initramfs/post-update.d/
	mv -f /root/99-uefi /etc/initramfs/post-update.d/;
	chmod +x /etc/initramfs/post-update.d/99-uefi;
	chown root:root /etc/initramfs/post-update.d/99-uefi;
	ln -s /etc/initramfs/post-update.d/99-uefi /usr/local/bin/grub-menu
else
	rm -f /root/99-uefi;
fi
}

# Defrag
defrag_p2(){
if [ $ext4 -eq 1 ]; then
	e4defrag -c ${P_VALUE};
fi
if [ $btrfs -eq 1 ]; then
	btrfs filesystem defragment -f -r ${P_VALUE};
fi
if [ $xfs -eq 1 ]; then
	xfs_fsr ${P_VALUE};
fi
}

# Shrink
ext4_shrink(){
echo ""
chmod +x scripts/shrink
scripts/shrink -s ${BOARD_EXT}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img
echo 'LOOP1="/dev/mapper/' > kpart1
echo 'LOOP2="/dev/mapper/' >> kpart1
IMAGE_FILE="${BOARD_EXT}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img"
kpartx="$(kpartx -av $IMAGE_FILE)"
echo "$kpartx"
if [[ `grep -w "VERSION_CODENAME=jammy" "/etc/os-release"` ]]; then
	# snapd woes; grep for higher loop numbers
	grep -o 'loop[0-9]\+p.' <<<"$kpartx" > kpart2;
else
	grep -o 'loop.p.' <<<"$kpartx" > kpart2;
fi
echo '"' > kpart3
echo '"' >> kpart3
paste -d '\0' kpart1 kpart2 kpart3 > kpart.txt
rm -f {kpart1,kpart2,kpart3}
source kpart.txt
BOOT="${LOOP1}"
mkdir -p p1
sleep 1s
mount "${BOOT}" p1
rm -f p1/cmdline.txt
rm -f part-uuid.txt
ROOTFS="${LOOP2}"
ROOT_PARTUUID=$(blkid -o export -- ${ROOTFS} | sed -ne 's/^PARTUUID=//p')
echo ROOT_PARTUUID='"'$ROOT_PARTUUID'"' > part-uuid.txt
source part-uuid.txt
cmdline
sleep 1s
umount p1
rm -fdr p1
kpartx -d ${IMAGE_FILE}
rm -f kpart.txt
}

# Finish image
finish_image(){
IMAGE_TIME="$(date +%T | sed 's/://g' | sed 's/..$//')"
if [[ -f "kernel.txt" ]]; then source kernel.txt; fi
if [[ -f "${BOARD_EXT}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img" ]]; then
	mv -f ${BOARD_EXT}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img \
	${BOARD_EXT}-${DISTRO}-${DISTRO_VERSION}-${INSTALLED_KERNEL}-${ARCH_EXT}-${FSTYPE}-${IMAGE_DATE}-${IMAGE_TIME}.img
	if [ $compress_img -eq 1 ]; then
		echo ""
		echo_compress
		xz -zev --threads=${CORES} ${BOARD_EXT}-${DISTRO}-${DISTRO_VERSION}-${INSTALLED_KERNEL}-${ARCH_EXT}-${FSTYPE}-${IMAGE_DATE}-${IMAGE_TIME}.img
	fi
fi
if [[ -f "${BOARD_EXT}-${DISTRO}-${DISTRO_VERSION}-${INSTALLED_KERNEL}-${ARCH_EXT}-${FSTYPE}-${IMAGE_DATE}-${IMAGE_TIME}.img.xz" ]]; then
	sha256sum ${BOARD_EXT}-${DISTRO}-${DISTRO_VERSION}-${INSTALLED_KERNEL}-${ARCH_EXT}-${FSTYPE}-${IMAGE_DATE}-${IMAGE_TIME}.img.xz \
	> ${BOARD_EXT}-${DISTRO}-${DISTRO_VERSION}-${INSTALLED_KERNEL}-${ARCH_EXT}-${FSTYPE}-${IMAGE_DATE}-${IMAGE_TIME}.img.xz.sha256
	sha256sum --check ${BOARD_EXT}-${DISTRO}-${DISTRO_VERSION}-${INSTALLED_KERNEL}-${ARCH_EXT}-${FSTYPE}-${IMAGE_DATE}-${IMAGE_TIME}.img.xz.sha256
fi
}
